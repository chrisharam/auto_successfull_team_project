# fill_utils.py
from __future__ import annotations
from typing import Optional, Sequence, Protocol, Tuple, Union
from PyQt5.QtCore import QPoint
from PyQt5.QtGui import QColor

# 팀 공용 타입: 문자열/튜플/QColor 모두 허용
ColorLike = Union[str, Tuple[int, int, int], QColor]


class SupportsFill(Protocol):
    """
    팀의 도형 클래스가 이 인터페이스를 만족하면 됩니다.
    - id: 고유 식별자
    - fill: 면색(QColor) 또는 None(채우기 없음)
    - contains(pt): 점이 도형 내부(또는 선택 기준)에 포함되는지
    """
    id: int
    fill: Optional[QColor]

    def contains(self, pt: QPoint) -> bool:
        ...


def to_qcolor(c: Optional[ColorLike]) -> Optional[QColor]:
    """문자열/튜플/QColor → QColor (None이면 None 유지)"""
    if c is None:
        return None
    if isinstance(c, QColor):
        return QColor(c)
    if isinstance(c, tuple) and len(c) == 3:
        r, g, b = c
        return QColor(int(r), int(g), int(b))
    return QColor(str(c))  # "red", "#112233" 등


def set_fill_by_id(shapes: Sequence[SupportsFill], shape_id: int, color: Optional[ColorLike]) -> bool:
    """
    지정 ID 도형의 면색을 설정/해제(None).
    반환: 성공 여부
    """
    for s in shapes:
        if s.id == shape_id:
            s.fill = to_qcolor(color)
            return True
    return False


def set_fill_at_point(
    shapes: Sequence[SupportsFill],
    xy: Tuple[int, int],
    color: Optional[ColorLike],
    *,
    topmost_last: bool = True,
    fill_predicate: Optional[callable] = None,
) -> Optional[int]:
    """
    좌표(x, y)에 히트하는 '맨 위' 도형에 면색을 설정.
    - shapes: 도형 레이어 배열 (맨 아래 → 맨 위 순서를 팀 규약에 맞게 넣으세요)
    - xy: (x, y)
    - color: 채울 색 (None이면 채우기 해제)
    - topmost_last: True면 리스트의 뒤쪽이 맨 위로 간주되어 역순 탐색
    - fill_predicate: 채우기 대상 필터(예: 선(Line) 제외). s -> bool
    반환: 채워진 도형의 id (없으면 None)
    """
    x, y = xy
    pt = QPoint(x, y)

    seq = reversed(shapes) if topmost_last else iter(shapes)

    for s in seq:
        if fill_predicate is not None and not fill_predicate(s):
            continue
        if s.contains(pt):
            s.fill = to_qcolor(color)
            return s.id
    return None

if __name__ == "__main__":
    main()
